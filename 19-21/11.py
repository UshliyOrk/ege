"""
Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. 
Игроки ходят по очереди, первый ход делает Петя. 
За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. 
Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. 
У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.
Игра завершается в тот момент, когда количество камней в куче становится не менее 69. 
Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, 
в которой будет 69 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤68.

Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.
Описать стратегию игрока — значит, описать, какой ход он должен сделать в любой ситуации,
которая ему может встретиться при различной игре противника.
19
Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. 
Укажите минимальное значение S, когда такая ситуация возможна.
20
Найдите два таких значения S, при которых у Пети есть выигрышная стратегия,
причём одновременно выполняются два условия:
— Петя не может выиграть за один ход;
— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.
21
Найдите минимальное значение S, при котором одновременно выполняются два условия:
— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом 
при любой игре Пети;
— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.
"""

# а = количество камней, n = номер предыдущего хода
def f19(a,n):
	# кто-то набрал нужное количество камней
	# сделаны лишние ходы
	# остановка игры
	if a > 68 or n>2:
		return n == 2
	# возможные ходы
	return any([f19(a+1, n+1), f19(a*2, n+1)])

def f20(a,n):
	# то же самое только уже для второго хода пети
	if a > 68 or n>3:
		return n == 3
	# проверяет сходил ли петя, возвращет ходы Вани
	# если ваня "глупый" протвник, тогда all --> any
	if n%2 == 1:
		return all([f20(a+1, n+1), f20(a*2, n+1)])
	# ходы пети
	return any([f20(a+1, n+1), f20(a*2, n+1)])

def f21(a,n):
	# та же проверка, но для первого и вторго ходов вани
	if a > 68 or n>4:
		return n == 2 or n == 4
	# ходы пети аналогично предыдущей ф-ии
	if n%2 == 0:
		return all([f21(a+1,n+1), f21(a*2, n+1)])
	#ходы вани
	return any([f21(a+1,n+1), f21(a*2, n+1)])


print("номер 19:", end=' ')
print(min([s for s in range(1, 69) if f19(s, 0)]))
print("номер 20:", end=' ')
print([s for s in range(1, 69) if f20(s, 0)])
print("номер 21:", end=' ')
print(min([s for s in range(1, 69) if f21(s, 0)]))